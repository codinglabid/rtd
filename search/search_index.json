{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DOKUMENTASI DEVELOPR CODINGLAB Selamat datang di dokumentasi developer codinglab","title":"Home"},{"location":"#dokumentasi-developr-codinglab","text":"Selamat datang di dokumentasi developer codinglab","title":"DOKUMENTASI DEVELOPR CODINGLAB"},{"location":"express/","text":"Express","title":"Index"},{"location":"express/#express","text":"","title":"Express"},{"location":"flutter/cek_koneksi/","text":"Check Koneksi Internet Untuk melakukan check koneksi internet kita menggunakan connectivity plus , pada saat dokumentasi ini di buat example yang betebaran kita harus implementasi pada setiap screen. Disini kita hanya deklarasi sekali saja di main pada Materialapp , tapi sudah mengcover semua screen Usage/Examples import 'package:connectivity_plus/connectivity_plus.dart'; import 'package:flutter/material.dart'; MaterialApp( routes: { '/home': (context) => HomeScreen(), '/about': (context) => AboutScreen(), }, initialRoute: '/home', builder: (ctxm, widget) { return StreamBuilder( stream: Connectivity().onConnectivityChanged, builder: (ctxb, AsyncSnapshot<ConnectivityResult> snapshot) { return snapshot.data == ConnectivityResult.none ? const NoInternetScreen() : widget!; }, ); }), ) Reference https://pub.dev/packages/connectivity_plus/example https://stackoverflow.com/questions/68030497/check-connectivity-in-flutter-and-change-state-according-connection-status","title":"Cek Koneksi Internet"},{"location":"flutter/cek_koneksi/#check-koneksi-internet","text":"Untuk melakukan check koneksi internet kita menggunakan connectivity plus , pada saat dokumentasi ini di buat example yang betebaran kita harus implementasi pada setiap screen. Disini kita hanya deklarasi sekali saja di main pada Materialapp , tapi sudah mengcover semua screen","title":"Check Koneksi Internet"},{"location":"flutter/cek_koneksi/#usageexamples","text":"import 'package:connectivity_plus/connectivity_plus.dart'; import 'package:flutter/material.dart'; MaterialApp( routes: { '/home': (context) => HomeScreen(), '/about': (context) => AboutScreen(), }, initialRoute: '/home', builder: (ctxm, widget) { return StreamBuilder( stream: Connectivity().onConnectivityChanged, builder: (ctxb, AsyncSnapshot<ConnectivityResult> snapshot) { return snapshot.data == ConnectivityResult.none ? const NoInternetScreen() : widget!; }, ); }), )","title":"Usage/Examples"},{"location":"flutter/cek_koneksi/#reference","text":"https://pub.dev/packages/connectivity_plus/example https://stackoverflow.com/questions/68030497/check-connectivity-in-flutter-and-change-state-according-connection-status","title":"Reference"},{"location":"react/","text":"React Afri Dermawan Ginting","title":"Index"},{"location":"react/#react","text":"Afri Dermawan Ginting","title":"React"},{"location":"reactnative/","text":"ReactNative","title":"Index"},{"location":"reactnative/#reactnative","text":"","title":"ReactNative"},{"location":"services/login-with/facebook/","text":"Login with facebook untuk dokumentasi login dengan facebook bisa di lihat di https://developers.facebook.com/docs/facebook-login/web Verifikasi token $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, 'https://graph.facebook.com/me?fields=email&access_token=' . input token); curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); $output = json_decode(curl_exec($curl)); curl_close($curl);","title":"Facebook"},{"location":"services/login-with/facebook/#login-with-facebook","text":"untuk dokumentasi login dengan facebook bisa di lihat di https://developers.facebook.com/docs/facebook-login/web","title":"Login with facebook"},{"location":"services/login-with/facebook/#verifikasi-token","text":"$curl = curl_init(); curl_setopt($curl, CURLOPT_URL, 'https://graph.facebook.com/me?fields=email&access_token=' . input token); curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); $output = json_decode(curl_exec($curl)); curl_close($curl);","title":"Verifikasi token"},{"location":"services/login-with/google/","text":"Login With Google berikut link penggunaan login dengan google di web https://developers.google.com/identity/gsi/web/guides/overview catatan: harap pastikan telah membuat oauth client id pada https://console.cloud.google.com/ dan mengisi oauth consent screen Verifikasi token untuk verifikasi token gunakan Google API Client Library composer require google/apiclient $post = Yii::$app->request->post(); $jwt = new JWT(); $jwt::$leeway = 10; $client = new GoogleClient(['client_id' => your client id, 'jwt' => $jwt]); $payload = $client->verifyIdToken(input token);","title":"Google"},{"location":"services/login-with/google/#login-with-google","text":"berikut link penggunaan login dengan google di web https://developers.google.com/identity/gsi/web/guides/overview catatan: harap pastikan telah membuat oauth client id pada https://console.cloud.google.com/ dan mengisi oauth consent screen","title":"Login With Google"},{"location":"services/login-with/google/#verifikasi-token","text":"untuk verifikasi token gunakan Google API Client Library composer require google/apiclient $post = Yii::$app->request->post(); $jwt = new JWT(); $jwt::$leeway = 10; $client = new GoogleClient(['client_id' => your client id, 'jwt' => $jwt]); $payload = $client->verifyIdToken(input token);","title":"Verifikasi token"},{"location":"services/whatsapp/whatsapp-web-js/","text":"Whatsapp Web js Whatsapp web js ialah suatu library yang memungkinkan kita untuk membuat sebuah bot Whatsapp. Whatsapp web ini berjalan menggunakan puppeter yang memungkinkan kita merunning browser lewat syntax dan kita bisa mengontrolnya lewat syntax, defaultnya menggunakan chromium. hingga dokumentasi ini ditulis library ini running menggunakan node js. Preinstall pastikan node js sudah terinstall pada komputer yang di gunakan, jika belum silahkan download pada https://nodejs.org/en/download/ pilih sesuai os yang di gunakan, download dan lakukan installasi Installation langkah pertama silhkan buat folder whatsapp, masuk ke dalam folder whatsapp kemudian jalankan perintah npm init enter sampai proses selesai. sekarang kita install dependencies nya dengan menjalankan perintah npm install express express-validator nodemon qrcode socket.io whatsapp-web.js Syntax app.js const { Client, LocalAuth } = require(\"whatsapp-web.js\"); const express = require(\"express\"); const { body, validationResult } = require(\"express-validator\"); const qrcode = require(\"qrcode\"); const http = require(\"http\"); const { phoneNumberFormatter } = require(\"./helpers/formatter\"); const app = express(); const { Server } = require(\"socket.io\"); const server = http.createServer(app); const io = new Server(server); const port = process.env.PORT || 8000; app.use(express.json()); app.use( express.urlencoded({ extended: true, }) ); app.get(\"/\", (req, res) => { res.sendFile(\"index.html\", { root: __dirname, }); }); const client = new Client({ restartOnAuthFail: true, puppeteer: { headless: true, args: [ \"--no-sandbox\", \"--disable-setuid-sandbox\", \"--disable-dev-shm-usage\", \"--disable-accelerated-2d-canvas\", \"--no-first-run\", \"--no-zygote\", \"--single-process\", // <- this one doesn't works in Windows \"--disable-gpu\", ], }, authStrategy: new LocalAuth(), }); client.initialize(); io.on(\"connection\", function (socket) { console.log(\"connection\"); socket.emit(\"message\", \"Connecting...\"); client.on(\"qr\", (qr) => { console.log(\"QR RECEIVED\", qr); qrcode.toDataURL(qr, (err, url) => { socket.emit(\"qr\", url); socket.emit(\"message\", \"QR Code received, scan please!\"); }); }); client.on(\"ready\", () => { console.log(\"ready\"); socket.emit(\"ready\", \"Whatsapp is ready!\"); socket.emit(\"message\", \"Whatsapp is ready!\"); }); client.on(\"authenticated\", () => { socket.emit(\"authenticated\", \"Whatsapp is authenticated!\"); socket.emit(\"message\", \"Whatsapp is authenticated!\"); console.log(\"AUTHENTICATED\"); }); client.on(\"auth_failure\", function (session) { console.log(\"auth_failure\"); socket.emit(\"message\", \"Auth failure, restarting...\"); }); client.on(\"disconnected\", (reason) => { console.log(\"disconnected\"); socket.emit(\"message\", \"Whatsapp is disconnected!\"); client.destroy(); client.initialize(); }); }); const checkRegisteredNumber = async function (number) { const isRegistered = await client.isRegisteredUser(number); return isRegistered; }; // Send message app.post( \"/send-message\", [body(\"number\").notEmpty(), body(\"message\").notEmpty()], async (req, res) => { const errors = validationResult(req).formatWith(({ msg }) => { return msg; }); if (!errors.isEmpty()) { return res.status(422).json({ status: false, message: errors.mapped(), }); } const number = phoneNumberFormatter(req.body.number); const message = req.body.message; const isRegisteredNumber = await checkRegisteredNumber(number); if (!isRegisteredNumber) { return res.status(422).json({ status: false, message: \"The number is not registered\", }); } client .sendMessage(number, message) .then((response) => { res.status(200).json({ status: true, response: response, }); }) .catch((err) => { res.status(500).json({ status: false, response: err, }); }); } ); server.listen(port, function () { console.log(\"App running on *: \" + port); }); index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <title>Document</title> <style> .hide { display: none; } </style> </head> <body> <div id=\"app\"> <img src=\"\" alt=\"QR Code\" id=\"qrcode\" class=\"hide\" /> <h3>Logs:</h3> <ul class=\"logs\"></ul> </div> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" crossorigin=\"anonymous\" ></script> <script src=\"/socket.io/socket.io.js\" crossorigin=\"anonymous\"></script> <script> $(document).ready(function () { var socket = io(); socket.on(\"message\", function (msg) { $(\".logs\").append($(\"<li>\").text(msg)); }); socket.on(\"qr\", function (src) { $(\"#qrcode\").attr(\"src\", src); $(\"#qrcode\").show(); }); socket.on(\"ready\", function (data) { $(\"#qrcode\").hide(); }); socket.on(\"authenticated\", function (data) { $(\"#qrcode\").hide(); }); }); </script> </body> </html> Penggunaan untuk menjalankannya silahkan jalankan perintah nodemon app.js kemudian buka http://localhost:8000 pada browser tunggu beberapa saat hingga barcode muncul, setelah barcode muncul scan barcode tersebut dengan akun Whatsapp, mausk dari tautkan perangkat. ketika scan berhasil silahkan tunggu hingga status ready, dan Api pun siap di gunakan API Reference Send Message POST /send-message Body Type Description number number Required . Your number message string Required . Your message Headers value Content-Type application/json Reference https://github.com/pedroslopez/whatsapp-web.js/ https://github.com/ngekoding/whatsapp-api-tutorial https://socket.io/ https://expressjs.com/ Deployment VPS untuk melakukan deploy node js silahkan install https://pm2.keymetrics.io/ pada pvs yang ada. setelah pm2 berhasil di install clone source yang telah di buat tadi pada github terkait dan masuk ke dalam folder hasil clone tadi. jalankan perintah pm2 start app.js --name==wa --watch dan aplikasipun siap di gunakan pada port 8000 sesuai dengan yang kita buat pada app.js dan pastikan port tersebut sudah di buka pada firewall","title":"Whatsapp Web Js"},{"location":"services/whatsapp/whatsapp-web-js/#whatsapp-web-js","text":"Whatsapp web js ialah suatu library yang memungkinkan kita untuk membuat sebuah bot Whatsapp. Whatsapp web ini berjalan menggunakan puppeter yang memungkinkan kita merunning browser lewat syntax dan kita bisa mengontrolnya lewat syntax, defaultnya menggunakan chromium. hingga dokumentasi ini ditulis library ini running menggunakan node js.","title":"Whatsapp Web js"},{"location":"services/whatsapp/whatsapp-web-js/#preinstall","text":"pastikan node js sudah terinstall pada komputer yang di gunakan, jika belum silahkan download pada https://nodejs.org/en/download/ pilih sesuai os yang di gunakan, download dan lakukan installasi","title":"Preinstall"},{"location":"services/whatsapp/whatsapp-web-js/#installation","text":"langkah pertama silhkan buat folder whatsapp, masuk ke dalam folder whatsapp kemudian jalankan perintah npm init enter sampai proses selesai. sekarang kita install dependencies nya dengan menjalankan perintah npm install express express-validator nodemon qrcode socket.io whatsapp-web.js","title":"Installation"},{"location":"services/whatsapp/whatsapp-web-js/#syntax","text":"","title":"Syntax"},{"location":"services/whatsapp/whatsapp-web-js/#appjs","text":"const { Client, LocalAuth } = require(\"whatsapp-web.js\"); const express = require(\"express\"); const { body, validationResult } = require(\"express-validator\"); const qrcode = require(\"qrcode\"); const http = require(\"http\"); const { phoneNumberFormatter } = require(\"./helpers/formatter\"); const app = express(); const { Server } = require(\"socket.io\"); const server = http.createServer(app); const io = new Server(server); const port = process.env.PORT || 8000; app.use(express.json()); app.use( express.urlencoded({ extended: true, }) ); app.get(\"/\", (req, res) => { res.sendFile(\"index.html\", { root: __dirname, }); }); const client = new Client({ restartOnAuthFail: true, puppeteer: { headless: true, args: [ \"--no-sandbox\", \"--disable-setuid-sandbox\", \"--disable-dev-shm-usage\", \"--disable-accelerated-2d-canvas\", \"--no-first-run\", \"--no-zygote\", \"--single-process\", // <- this one doesn't works in Windows \"--disable-gpu\", ], }, authStrategy: new LocalAuth(), }); client.initialize(); io.on(\"connection\", function (socket) { console.log(\"connection\"); socket.emit(\"message\", \"Connecting...\"); client.on(\"qr\", (qr) => { console.log(\"QR RECEIVED\", qr); qrcode.toDataURL(qr, (err, url) => { socket.emit(\"qr\", url); socket.emit(\"message\", \"QR Code received, scan please!\"); }); }); client.on(\"ready\", () => { console.log(\"ready\"); socket.emit(\"ready\", \"Whatsapp is ready!\"); socket.emit(\"message\", \"Whatsapp is ready!\"); }); client.on(\"authenticated\", () => { socket.emit(\"authenticated\", \"Whatsapp is authenticated!\"); socket.emit(\"message\", \"Whatsapp is authenticated!\"); console.log(\"AUTHENTICATED\"); }); client.on(\"auth_failure\", function (session) { console.log(\"auth_failure\"); socket.emit(\"message\", \"Auth failure, restarting...\"); }); client.on(\"disconnected\", (reason) => { console.log(\"disconnected\"); socket.emit(\"message\", \"Whatsapp is disconnected!\"); client.destroy(); client.initialize(); }); }); const checkRegisteredNumber = async function (number) { const isRegistered = await client.isRegisteredUser(number); return isRegistered; }; // Send message app.post( \"/send-message\", [body(\"number\").notEmpty(), body(\"message\").notEmpty()], async (req, res) => { const errors = validationResult(req).formatWith(({ msg }) => { return msg; }); if (!errors.isEmpty()) { return res.status(422).json({ status: false, message: errors.mapped(), }); } const number = phoneNumberFormatter(req.body.number); const message = req.body.message; const isRegisteredNumber = await checkRegisteredNumber(number); if (!isRegisteredNumber) { return res.status(422).json({ status: false, message: \"The number is not registered\", }); } client .sendMessage(number, message) .then((response) => { res.status(200).json({ status: true, response: response, }); }) .catch((err) => { res.status(500).json({ status: false, response: err, }); }); } ); server.listen(port, function () { console.log(\"App running on *: \" + port); });","title":"app.js"},{"location":"services/whatsapp/whatsapp-web-js/#indexhtml","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <title>Document</title> <style> .hide { display: none; } </style> </head> <body> <div id=\"app\"> <img src=\"\" alt=\"QR Code\" id=\"qrcode\" class=\"hide\" /> <h3>Logs:</h3> <ul class=\"logs\"></ul> </div> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" crossorigin=\"anonymous\" ></script> <script src=\"/socket.io/socket.io.js\" crossorigin=\"anonymous\"></script> <script> $(document).ready(function () { var socket = io(); socket.on(\"message\", function (msg) { $(\".logs\").append($(\"<li>\").text(msg)); }); socket.on(\"qr\", function (src) { $(\"#qrcode\").attr(\"src\", src); $(\"#qrcode\").show(); }); socket.on(\"ready\", function (data) { $(\"#qrcode\").hide(); }); socket.on(\"authenticated\", function (data) { $(\"#qrcode\").hide(); }); }); </script> </body> </html>","title":"index.html"},{"location":"services/whatsapp/whatsapp-web-js/#penggunaan","text":"untuk menjalankannya silahkan jalankan perintah nodemon app.js kemudian buka http://localhost:8000 pada browser tunggu beberapa saat hingga barcode muncul, setelah barcode muncul scan barcode tersebut dengan akun Whatsapp, mausk dari tautkan perangkat. ketika scan berhasil silahkan tunggu hingga status ready, dan Api pun siap di gunakan","title":"Penggunaan"},{"location":"services/whatsapp/whatsapp-web-js/#api-reference","text":"","title":"API Reference"},{"location":"services/whatsapp/whatsapp-web-js/#send-message","text":"POST /send-message Body Type Description number number Required . Your number message string Required . Your message Headers value Content-Type application/json","title":"Send Message"},{"location":"services/whatsapp/whatsapp-web-js/#reference","text":"https://github.com/pedroslopez/whatsapp-web.js/ https://github.com/ngekoding/whatsapp-api-tutorial https://socket.io/ https://expressjs.com/","title":"Reference"},{"location":"services/whatsapp/whatsapp-web-js/#deployment-vps","text":"untuk melakukan deploy node js silahkan install https://pm2.keymetrics.io/ pada pvs yang ada. setelah pm2 berhasil di install clone source yang telah di buat tadi pada github terkait dan masuk ke dalam folder hasil clone tadi. jalankan perintah pm2 start app.js --name==wa --watch dan aplikasipun siap di gunakan pada port 8000 sesuai dengan yang kita buat pada app.js dan pastikan port tersebut sudah di buka pada firewall","title":"Deployment VPS"},{"location":"yii2/avoiding-xss/","text":"Avoiding XSS XSS atau skrip lintas situs terjadi ketika keluaran tidak lolos dengan benar saat mengeluarkan HTML ke browser. Misalnya, jika pengguna dapat memasukkan namanya dan alih-alih Alexander ia memasukkan <script>alert('Hello!');</script> , setiap halaman yang menampilkan nama pengguna tanpa keluar darinya akan menjalankan JavaScript alert('Hello!') ; mengakibatkan kotak peringatan muncul di browser. Bergantung pada situs web alih-alih peringatan yang tidak bersalah, skrip semacam itu dapat mengirim pesan menggunakan nama Anda atau bahkan melakukan transaksi bank. Usage/Examples Untuk melakukan filter kita bisa memanfaatkan \\yii\\helpers\\HtmlPurifier::process($description) yang tertera pada dokumentasi yii2. contoh penerapan pada model public function rules() { return [ [['nama', 'alamat_property', 'no_telpon', 'jenis_penawaran'], 'filter', 'filter' => '\\yii\\helpers\\HtmlPurifier::process', 'message' => '{attribute} input itdak valid'], [['nama', 'alamat_property', 'no_telpon', 'jenis_penawaran'], 'required'], ]; } Reference https://www.yiiframework.com/doc/guide/2.0/en/security-best-practices https://stackoverflow.com/questions/30124559/yii2-how-to-validate-xss-cross-site-scripting-in-form-model-input","title":"Avoiding XSS"},{"location":"yii2/avoiding-xss/#avoiding-xss","text":"XSS atau skrip lintas situs terjadi ketika keluaran tidak lolos dengan benar saat mengeluarkan HTML ke browser. Misalnya, jika pengguna dapat memasukkan namanya dan alih-alih Alexander ia memasukkan <script>alert('Hello!');</script> , setiap halaman yang menampilkan nama pengguna tanpa keluar darinya akan menjalankan JavaScript alert('Hello!') ; mengakibatkan kotak peringatan muncul di browser. Bergantung pada situs web alih-alih peringatan yang tidak bersalah, skrip semacam itu dapat mengirim pesan menggunakan nama Anda atau bahkan melakukan transaksi bank.","title":"Avoiding XSS"},{"location":"yii2/avoiding-xss/#usageexamples","text":"Untuk melakukan filter kita bisa memanfaatkan \\yii\\helpers\\HtmlPurifier::process($description) yang tertera pada dokumentasi yii2. contoh penerapan pada model public function rules() { return [ [['nama', 'alamat_property', 'no_telpon', 'jenis_penawaran'], 'filter', 'filter' => '\\yii\\helpers\\HtmlPurifier::process', 'message' => '{attribute} input itdak valid'], [['nama', 'alamat_property', 'no_telpon', 'jenis_penawaran'], 'required'], ]; }","title":"Usage/Examples"},{"location":"yii2/avoiding-xss/#reference","text":"https://www.yiiframework.com/doc/guide/2.0/en/security-best-practices https://stackoverflow.com/questions/30124559/yii2-how-to-validate-xss-cross-site-scripting-in-form-model-input","title":"Reference"},{"location":"yii2/installation/","text":"Installation install yii2 advanced composer create-project --prefer-dist yiisoft/yii2-app-advanced nama_project Setup vhost buka file vhost, untuk mac ada di /usr/local/etc/httpd/extra/httpd-vhost.conf lalu tambahkan <VirtualHost *:80> DocumentRoot \"/Users/muhammadansorinasution/Sites/nama_project\" ServerName nama_project.test </VirtualHost> untuk /Users/muhammadansorinasution/Sites/ sesuaikan dengan path masing masing. langkah selanjutnya buka file /private/etc/hosts pada mac lalu tambahkan 127.0.0.1 nama_project.test kemudian restart apache. Init Project buka project menggunakan editor seperti vscode, pada contoh ini kita menggunakan vscode. buka terminal lalu jalankan cli berikut: php init pilih mode develop atau production htaccess buat file di root project .htaccess tambahkan ini pada file tersebut Options +FollowSymlinks RewriteEngine On # ===================== admin ===================== RewriteCond %{REQUEST_URI} ^/(admin) RewriteRule ^admin/assets/(.*)$ backend/web/assets/$1 [L] RewriteRule ^admin/css/(.*)$ backend/web/css/$1 [L] RewriteRule ^admin/images/(.*)$ backend/web/images/$1 [L] RewriteRule ^admin/js/(.*)$ backend/web/js/$1 [L] RewriteRule ^admin/fonts/(.*)$ frontend/web/fonts/$1 [L] RewriteRule ^admin/icon/(.*)$ frontend/web/icon/$1 [L] RewriteCond %{REQUEST_URI} !^/backend/web/(assets|css|images|js|fonts|icon)/ RewriteCond %{REQUEST_URI} ^/(admin) RewriteRule ^.*$ backend/web/index.php [L] # ===================== end admin ===================== # ===================== frontend ===================== RewriteCond %{REQUEST_URI} ^/(assets|css) RewriteRule ^assets/(.*)$ frontend/web/assets/$1 [L] RewriteRule ^css/(.*)$ frontend/web/css/$1 [L] RewriteRule ^js/(.*)$ frontend/web/js/$1 [L] RewriteRule ^images/(.*)$ frontend/web/images/$1 [L] RewriteRule ^fonts/(.*)$ frontend/web/fonts/$1 [L] RewriteRule ^icon/(.*)$ frontend/web/icon/$1 [L] RewriteCond %{REQUEST_URI} !^/(frontend|backend)/web/(assets|css|images|js|fonts|icon)/ RewriteCond %{REQUEST_URI} !index.php RewriteCond %{REQUEST_FILENAME} !-f [OR] RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^.*$ frontend/web/index.php # ===================== end frontend ===================== Note: setiap penambahan modul ataupun app pada project maka lakukan penambahan pada .htaccess sesuai dengan modul yang dibuat Pretty Url buka file nama_app/config/main.php lalu cari urlManager dan uncomment. langka selanjutnya kita akan membuat file Request.php pada folder commmon/components lalu tambahkan kode berikut: <?php namespace common\\components; class Request extends \\yii\\web\\Request { public $web; public $adminUrl; public function getBaseUrl(){ return str_replace($this->web, \"\", parent::getBaseUrl()) . $this->adminUrl; } public function resolvePathInfo(){ if($this->getUrl() === $this->adminUrl){ return \"\"; }else{ return parent::resolvePathInfo(); } } } buka kembali file nama_app/config/main.php modifikasi request yang ada [ ... 'components' => [ ... 'request' => [ 'csrfParam' => '_csrf-frontend', 'class' => 'common\\components\\Request', 'web'=> '/frontend/web', // 'adminUrl' => '/admin' // untuk adminUrl harap di perhatikan biasanya ini di aktifkan selain daripada app landing ], ... ] ] kebutuhan library dasar https://github.com/mdmsoft/yii2-admin https://github.com/johnitvn/yii2-ajaxcrud https://github.com/mdmsoft/yii2-upload-file https://demos.krajee.com/widget-details/datepicker https://demos.krajee.com/number https://demos.krajee.com/widget-details/select2","title":"Installation"},{"location":"yii2/installation/#installation","text":"install yii2 advanced composer create-project --prefer-dist yiisoft/yii2-app-advanced nama_project","title":"Installation"},{"location":"yii2/installation/#setup-vhost","text":"buka file vhost, untuk mac ada di /usr/local/etc/httpd/extra/httpd-vhost.conf lalu tambahkan <VirtualHost *:80> DocumentRoot \"/Users/muhammadansorinasution/Sites/nama_project\" ServerName nama_project.test </VirtualHost> untuk /Users/muhammadansorinasution/Sites/ sesuaikan dengan path masing masing. langkah selanjutnya buka file /private/etc/hosts pada mac lalu tambahkan 127.0.0.1 nama_project.test kemudian restart apache.","title":"Setup vhost"},{"location":"yii2/installation/#init-project","text":"buka project menggunakan editor seperti vscode, pada contoh ini kita menggunakan vscode. buka terminal lalu jalankan cli berikut: php init pilih mode develop atau production","title":"Init Project"},{"location":"yii2/installation/#htaccess","text":"buat file di root project .htaccess tambahkan ini pada file tersebut Options +FollowSymlinks RewriteEngine On # ===================== admin ===================== RewriteCond %{REQUEST_URI} ^/(admin) RewriteRule ^admin/assets/(.*)$ backend/web/assets/$1 [L] RewriteRule ^admin/css/(.*)$ backend/web/css/$1 [L] RewriteRule ^admin/images/(.*)$ backend/web/images/$1 [L] RewriteRule ^admin/js/(.*)$ backend/web/js/$1 [L] RewriteRule ^admin/fonts/(.*)$ frontend/web/fonts/$1 [L] RewriteRule ^admin/icon/(.*)$ frontend/web/icon/$1 [L] RewriteCond %{REQUEST_URI} !^/backend/web/(assets|css|images|js|fonts|icon)/ RewriteCond %{REQUEST_URI} ^/(admin) RewriteRule ^.*$ backend/web/index.php [L] # ===================== end admin ===================== # ===================== frontend ===================== RewriteCond %{REQUEST_URI} ^/(assets|css) RewriteRule ^assets/(.*)$ frontend/web/assets/$1 [L] RewriteRule ^css/(.*)$ frontend/web/css/$1 [L] RewriteRule ^js/(.*)$ frontend/web/js/$1 [L] RewriteRule ^images/(.*)$ frontend/web/images/$1 [L] RewriteRule ^fonts/(.*)$ frontend/web/fonts/$1 [L] RewriteRule ^icon/(.*)$ frontend/web/icon/$1 [L] RewriteCond %{REQUEST_URI} !^/(frontend|backend)/web/(assets|css|images|js|fonts|icon)/ RewriteCond %{REQUEST_URI} !index.php RewriteCond %{REQUEST_FILENAME} !-f [OR] RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^.*$ frontend/web/index.php # ===================== end frontend ===================== Note: setiap penambahan modul ataupun app pada project maka lakukan penambahan pada .htaccess sesuai dengan modul yang dibuat","title":"htaccess"},{"location":"yii2/installation/#pretty-url","text":"buka file nama_app/config/main.php lalu cari urlManager dan uncomment. langka selanjutnya kita akan membuat file Request.php pada folder commmon/components lalu tambahkan kode berikut: <?php namespace common\\components; class Request extends \\yii\\web\\Request { public $web; public $adminUrl; public function getBaseUrl(){ return str_replace($this->web, \"\", parent::getBaseUrl()) . $this->adminUrl; } public function resolvePathInfo(){ if($this->getUrl() === $this->adminUrl){ return \"\"; }else{ return parent::resolvePathInfo(); } } } buka kembali file nama_app/config/main.php modifikasi request yang ada [ ... 'components' => [ ... 'request' => [ 'csrfParam' => '_csrf-frontend', 'class' => 'common\\components\\Request', 'web'=> '/frontend/web', // 'adminUrl' => '/admin' // untuk adminUrl harap di perhatikan biasanya ini di aktifkan selain daripada app landing ], ... ] ]","title":"Pretty Url"},{"location":"yii2/installation/#kebutuhan-library-dasar","text":"https://github.com/mdmsoft/yii2-admin https://github.com/johnitvn/yii2-ajaxcrud https://github.com/mdmsoft/yii2-upload-file https://demos.krajee.com/widget-details/datepicker https://demos.krajee.com/number https://demos.krajee.com/widget-details/select2","title":"kebutuhan library dasar"},{"location":"yii2/oauth2/","text":"Yii2 Oauth2 Installation Install with composer composer require --prefer-dist filsh/yii2-oauth2-server \"*\" Untuk menggunakan ekstensi ini, cukup tambahkan kode berikut pada main.php pada module yang ingin di gunakan: 'bootstrap' => ['oauth2'], 'modules' => [ 'oauth2' => [ 'class' => 'filsh\\yii2\\oauth2server\\Module', 'tokenParamName' => 'accessToken', 'tokenAccessLifetime' => 3600 * 24, 'storageMap' => [ 'user_credentials' => 'common\\models\\User', ], 'grantTypes' => [ 'user_credentials' => [ 'class' => 'OAuth2\\GrantType\\UserCredentials', ], 'refresh_token' => [ 'class' => 'OAuth2\\GrantType\\RefreshToken', 'always_issue_new_refresh_token' => true ] ] ] ], 'components' => [ ..., 'urlManager' => [ ..., 'rules' => [ 'POST oauth2/<action:\\w+>' => 'oauth2/rest/<action>', ] ], ] pada model user di common models tambahkan implementasi dari: use OAuth2\\Storage\\UserCredentialsInterface; menjadi seperti ini class User extends ActiveRecord implements IdentityInterface, UserCredentialsInterface {...} lalu pada tambahkan method ini pada model user public function checkUserCredentials($username, $password) { $model = $this->findByUsername($username); return $model; } public function getUserDetails($username) { $model = $this->findByUsername($username); return [ 'user_id' => $model->id ]; } langkah selanjutnya pindahkan migrate yang berada di vendor @vendor/filsh/yii2-oauth2-server/src/migrations ke console\\migrations selanjutnya buka postman atau sejenis untuk melakukan request token API Reference Request Token POST /oauth2/token body Type Description Default grant_type string Required . Your grant type password username string Required . Your username null password string Required . Your password null client_id string Required . Your client id testclient client_secret string Required . Your client secret testpass Usage/Examples <?php namespace frontend\\controllers; use yii\\helpers\\ArrayHelper; use yii\\filters\\auth\\HttpBearerAuth; use yii\\filters\\auth\\QueryParamAuth; use filsh\\yii2\\oauth2server\\filters\\ErrorToExceptionFilter; use filsh\\yii2\\oauth2server\\filters\\auth\\CompositeAuth; class HaloController extends \\yii\\rest\\Controller { /** * @inheritdoc */ // start validasi token public function behaviors() { return ArrayHelper::merge(parent::behaviors(), [ 'authenticator' => [ 'class' => CompositeAuth::class, 'authMethods' => [ ['class' => HttpBearerAuth::class], ['class' => QueryParamAuth::class, 'tokenParam' => 'accessToken'], ] ], 'exceptionFilter' => [ 'class' => ErrorToExceptionFilter::class ], ]); } // end validasi token public function actionIndex() { return 'Halo'; } } silahkan request token lalu copykan access_token yang di dapat dan akses endpoint /halo dengan memasukkan authorization nya dari token yang tadi Generate Access token with username langkah pertama manfaatkan method login user, kemudian generate token melalui method createAccessToken pada class server filsh. pada kasus yang digunakan untuk login with google, facebook, karna kita tidak tau password yang digunakan setiap user. maka kita generate token hanya dengan user login menggunakan username tanpa validasi password contoh penggunaan Yii::$app->user->login($user, $this->rememberMe ? 3600 * 24 * 30 : 0); $module = Yii::$app->getModule('oauth2'); $acces_token = $module->getServer()->createAccessToken('testclient', Yii::$app->getUser()->getId()); Reference https://github.com/filsh/yii2-oauth2-server https://github.com/bshaffer/oauth2-server-php","title":"Oauth2"},{"location":"yii2/oauth2/#yii2-oauth2","text":"","title":"Yii2 Oauth2"},{"location":"yii2/oauth2/#installation","text":"Install with composer composer require --prefer-dist filsh/yii2-oauth2-server \"*\" Untuk menggunakan ekstensi ini, cukup tambahkan kode berikut pada main.php pada module yang ingin di gunakan: 'bootstrap' => ['oauth2'], 'modules' => [ 'oauth2' => [ 'class' => 'filsh\\yii2\\oauth2server\\Module', 'tokenParamName' => 'accessToken', 'tokenAccessLifetime' => 3600 * 24, 'storageMap' => [ 'user_credentials' => 'common\\models\\User', ], 'grantTypes' => [ 'user_credentials' => [ 'class' => 'OAuth2\\GrantType\\UserCredentials', ], 'refresh_token' => [ 'class' => 'OAuth2\\GrantType\\RefreshToken', 'always_issue_new_refresh_token' => true ] ] ] ], 'components' => [ ..., 'urlManager' => [ ..., 'rules' => [ 'POST oauth2/<action:\\w+>' => 'oauth2/rest/<action>', ] ], ] pada model user di common models tambahkan implementasi dari: use OAuth2\\Storage\\UserCredentialsInterface; menjadi seperti ini class User extends ActiveRecord implements IdentityInterface, UserCredentialsInterface {...} lalu pada tambahkan method ini pada model user public function checkUserCredentials($username, $password) { $model = $this->findByUsername($username); return $model; } public function getUserDetails($username) { $model = $this->findByUsername($username); return [ 'user_id' => $model->id ]; } langkah selanjutnya pindahkan migrate yang berada di vendor @vendor/filsh/yii2-oauth2-server/src/migrations ke console\\migrations selanjutnya buka postman atau sejenis untuk melakukan request token","title":"Installation"},{"location":"yii2/oauth2/#api-reference","text":"","title":"API Reference"},{"location":"yii2/oauth2/#request-token","text":"POST /oauth2/token body Type Description Default grant_type string Required . Your grant type password username string Required . Your username null password string Required . Your password null client_id string Required . Your client id testclient client_secret string Required . Your client secret testpass","title":"Request Token"},{"location":"yii2/oauth2/#usageexamples","text":"<?php namespace frontend\\controllers; use yii\\helpers\\ArrayHelper; use yii\\filters\\auth\\HttpBearerAuth; use yii\\filters\\auth\\QueryParamAuth; use filsh\\yii2\\oauth2server\\filters\\ErrorToExceptionFilter; use filsh\\yii2\\oauth2server\\filters\\auth\\CompositeAuth; class HaloController extends \\yii\\rest\\Controller { /** * @inheritdoc */ // start validasi token public function behaviors() { return ArrayHelper::merge(parent::behaviors(), [ 'authenticator' => [ 'class' => CompositeAuth::class, 'authMethods' => [ ['class' => HttpBearerAuth::class], ['class' => QueryParamAuth::class, 'tokenParam' => 'accessToken'], ] ], 'exceptionFilter' => [ 'class' => ErrorToExceptionFilter::class ], ]); } // end validasi token public function actionIndex() { return 'Halo'; } } silahkan request token lalu copykan access_token yang di dapat dan akses endpoint /halo dengan memasukkan authorization nya dari token yang tadi","title":"Usage/Examples"},{"location":"yii2/oauth2/#generate-access-token-with-username","text":"langkah pertama manfaatkan method login user, kemudian generate token melalui method createAccessToken pada class server filsh. pada kasus yang digunakan untuk login with google, facebook, karna kita tidak tau password yang digunakan setiap user. maka kita generate token hanya dengan user login menggunakan username tanpa validasi password contoh penggunaan Yii::$app->user->login($user, $this->rememberMe ? 3600 * 24 * 30 : 0); $module = Yii::$app->getModule('oauth2'); $acces_token = $module->getServer()->createAccessToken('testclient', Yii::$app->getUser()->getId());","title":"Generate Access token with username"},{"location":"yii2/oauth2/#reference","text":"https://github.com/filsh/yii2-oauth2-server https://github.com/bshaffer/oauth2-server-php","title":"Reference"},{"location":"yii2/send-message-whatsapp-web-js-service/","text":"Send Message Wahatsapp Web Js Service untuk melakukan pengiriman pesan melalui Wahatsapp web js Service pastikan service sudah berjalan Installation Install my-project with npm composer require codinglab/yii2-whatsapp-web Usage/Examples $url = 'http://localhost:8000/send-message'; $phoneNumber = '081277758656'; $message = 'halo mas mas'; $WhatsApp = new WhatsAppWeb($url, $phoneNumber, $message); $WhatsApp->sendMessage(); Reference https://github.com/codinglabid/whatsappweb","title":"Send Message Whatsapp Web Service"},{"location":"yii2/send-message-whatsapp-web-js-service/#send-message-wahatsapp-web-js-service","text":"untuk melakukan pengiriman pesan melalui Wahatsapp web js Service pastikan service sudah berjalan","title":"Send Message Wahatsapp Web Js Service"},{"location":"yii2/send-message-whatsapp-web-js-service/#installation","text":"Install my-project with npm composer require codinglab/yii2-whatsapp-web","title":"Installation"},{"location":"yii2/send-message-whatsapp-web-js-service/#usageexamples","text":"$url = 'http://localhost:8000/send-message'; $phoneNumber = '081277758656'; $message = 'halo mas mas'; $WhatsApp = new WhatsAppWeb($url, $phoneNumber, $message); $WhatsApp->sendMessage();","title":"Usage/Examples"},{"location":"yii2/send-message-whatsapp-web-js-service/#reference","text":"https://github.com/codinglabid/whatsappweb","title":"Reference"},{"location":"yii2/testing/","text":"Yii2 Testing Yii2 testing yang di rekomendasikan oleh yii2 framework https://www.yiiframework.com/doc/guide/2.0/en/test-unit adalah https://codeception.com/ meski dari pengakuan tim yii2, unit testing yii2 dibangun dengan PHPUnit. untuk testing codeception sendiri terdidi dari 3 bagian yaitu: Accaptance Functional test Unit test Testing sendiri di gunakan untuk aplikasi yang besar atau aplikasi kompleks untuk menghindari bug bug sedini mungkin di lakukan testing. untuk list action dari Accaptance bisa di lihat di sini https://codeception.com/docs/modules/WebDriver ketika menggunakan selenium sendangkan ketika menggunakan php browser actionnya ada di https://codeception.com/docs/modules/PhpBrowser","title":"Testing"},{"location":"yii2/testing/#yii2-testing","text":"Yii2 testing yang di rekomendasikan oleh yii2 framework https://www.yiiframework.com/doc/guide/2.0/en/test-unit adalah https://codeception.com/ meski dari pengakuan tim yii2, unit testing yii2 dibangun dengan PHPUnit. untuk testing codeception sendiri terdidi dari 3 bagian yaitu: Accaptance Functional test Unit test Testing sendiri di gunakan untuk aplikasi yang besar atau aplikasi kompleks untuk menghindari bug bug sedini mungkin di lakukan testing. untuk list action dari Accaptance bisa di lihat di sini https://codeception.com/docs/modules/WebDriver ketika menggunakan selenium sendangkan ketika menggunakan php browser actionnya ada di https://codeception.com/docs/modules/PhpBrowser","title":"Yii2 Testing"},{"location":"yii2/upload-file-use%20temporary%20php/","text":"Upload File use temporary php Pada jaman dahulu ketika kita memiliki 2 buah server dimana server a yang berfungsi untuk menghandle upload dari user, sementara server b adalah tempat penyimpanan file sebenarnya. pada contoh dulu kita akan membuat temporary sendiri pada project di common temp lalu kita akan melakukan file save as ke dalam folder tersebut, lalu ketika file berhasil di upload atau gagak upload ke server b kita juga akan melakukan unlink secara manual. untuk sekarang kita bisa memnfaatkan langsung temporary yang sudah otomatis di buat oleh method getInstance. Usage/Examples server A $file = UploadedFile::getInstance($model, 'file'); $client = new Client(); $token = Yii::$app->api->token(); $baseUrl = Yii::$app->params['api']['baseUrl']; $response = $client->createRequest() ->setMethod('POST') ->setUrl($baseUrl) ->setData([ 'name' => $file->name, 'extension' => $file->extension ]) ->addFile('imageFile', $file->tempName)//lokaso temporary yang di buat secara otomatis oleh getInstance ->addHeaders([ 'Authorization' => \"Bearer $token\" ]) ->send(); server B untuk handling upload file disini kita menggunakan model dari mdm $model = new Test(); $post = Yii::$app->request->post(); $file = UploadedFile::getInstanceByName('imageFile'); $file->name = $post['name']; $FileModel = FileModel::saveAs($file,['uploadPath' => '@common/upload/']);","title":"Upload File use temporary php"},{"location":"yii2/upload-file-use%20temporary%20php/#upload-file-use-temporary-php","text":"Pada jaman dahulu ketika kita memiliki 2 buah server dimana server a yang berfungsi untuk menghandle upload dari user, sementara server b adalah tempat penyimpanan file sebenarnya. pada contoh dulu kita akan membuat temporary sendiri pada project di common temp lalu kita akan melakukan file save as ke dalam folder tersebut, lalu ketika file berhasil di upload atau gagak upload ke server b kita juga akan melakukan unlink secara manual. untuk sekarang kita bisa memnfaatkan langsung temporary yang sudah otomatis di buat oleh method getInstance.","title":"Upload File use temporary php"},{"location":"yii2/upload-file-use%20temporary%20php/#usageexamples","text":"server A $file = UploadedFile::getInstance($model, 'file'); $client = new Client(); $token = Yii::$app->api->token(); $baseUrl = Yii::$app->params['api']['baseUrl']; $response = $client->createRequest() ->setMethod('POST') ->setUrl($baseUrl) ->setData([ 'name' => $file->name, 'extension' => $file->extension ]) ->addFile('imageFile', $file->tempName)//lokaso temporary yang di buat secara otomatis oleh getInstance ->addHeaders([ 'Authorization' => \"Bearer $token\" ]) ->send(); server B untuk handling upload file disini kita menggunakan model dari mdm $model = new Test(); $post = Yii::$app->request->post(); $file = UploadedFile::getInstanceByName('imageFile'); $file->name = $post['name']; $FileModel = FileModel::saveAs($file,['uploadPath' => '@common/upload/']);","title":"Usage/Examples"}]}